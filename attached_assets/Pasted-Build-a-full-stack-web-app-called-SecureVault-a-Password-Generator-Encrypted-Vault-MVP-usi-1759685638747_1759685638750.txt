Build a full-stack web app called **SecureVault** ‚Äî a Password Generator + Encrypted Vault (MVP) using **Next.js 14**, **TypeScript**, and **MongoDB**.

---

## üß† Goal
Create a privacy-first web app where users can:
- Generate strong passwords instantly.
- Save them in a personal encrypted vault.
- View, search, edit, and delete entries securely.

---

## üß∞ Tech Stack
- Frontend: **Next.js 14 (App Router)** with **TypeScript** and **TailwindCSS**
- Backend: **Next.js API routes** (or Express in `api/` folder)
- Database: **MongoDB** (via Mongoose or official driver)
- Encryption: **Client-side only** using `crypto-js` or `SubtleCrypto`
- Authentication: Simple **email + password** (hashed with bcrypt)
- Deployment-ready (should run with `npm run dev` or `pnpm dev`)

---

## üß© Core Features (MUST-HAVES)
1. **Password Generator**
   - Adjustable length (8‚Äì32)
   - Checkboxes for including numbers, letters, symbols
   - Option to exclude confusing characters (like `O/0`, `I/1`, `l`)

2. **Authentication System**
   - Signup + Login using email & password
   - Passwords stored as bcrypt hashes
   - Session managed via JWT or NextAuth (simple JWT is fine)

3. **Secure Vault**
   - Each item stores:
     - `title`
     - `username`
     - `password`
     - `url`
     - `notes`
   - All fields (except title) are **encrypted client-side**
   - Only encrypted data should reach MongoDB

4. **Vault UI**
   - Dashboard after login with:
     - List of saved entries (titles visible)
     - Search bar (filters by title/username)
     - Add / Edit / Delete buttons
   - Click to **copy password** (auto-clears clipboard after 15s)

---

## üåô Optional (Nice-to-Haves)
- Dark / Light mode toggle
- Tags or folders for grouping
- Export / Import (encrypted JSON)
- 2FA (TOTP-based using `speakeasy`)

---

## üßë‚Äçüíª Implementation Details
- Use React hooks & context for app state.
- All encryption/decryption happens on the **client only**.
- Server & DB never store plaintext.
- Use `.env` for secrets (JWT, Mongo URI).
- Minimal, responsive UI ‚Äî clean and fast.

---

## üì¶ Deliverables
- A fully working project with:
  1. `/auth/signup` and `/auth/login` pages  
  2. `/vault` dashboard  
  3. Working password generator  
  4. Client-side encryption util (`encryptData` / `decryptData`)
  5. MongoDB model for vault items  
- Include a `README.md` with:
  - Setup & run instructions
  - Note explaining which crypto library you used and why (2‚Äì3 lines)
- Project should start with:  
npm install
npm run dev

markdown
Copy code
and work on Replit instantly.

---

## ‚úÖ Acceptance Criteria
- I can sign up, log in, and add a vault item.
- MongoDB shows only encrypted blobs (no plaintext).
- Password generator feels instant.
- Copy button clears clipboard automatically.
- Search returns correct entries.
- Simple, fast, privacy-respecting UI.

---

## ü™Ñ Notes
- Project name: `secure-vault`
- Keep everything inside one Next.js project.
- Use TailwindCSS for styling.
- Prefer modern Next.js features (App Router, Server Components where appropriate).

Build this project **end-to-end**, including:
- Complete frontend UI
- API routes
- Database schema
- Encryption logic
- Basic styling

Then output:
1. Full folder structure  
2. All source files (TypeScript)  
3. Instructions to run locally  
4. Short explanation of chosen crypto library.
